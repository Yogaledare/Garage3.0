@model Garage3._0.Models.ViewModels.VehicleViewModel
@{
    ViewData["Title"] = "Invoice";
    DateTime parkingStart = (DateTime)Model.ParkingStartedDateTime!;
    DateTime parkingEnd = (DateTime)Model.ParkingEndedDateTime!;
    DateTime membershipEnd = (DateTime)Model.Membership.EndDate;
    int spotsTaken = Model.ParkingPlaces;
    bool isProMember = membershipEnd > parkingEnd ? true : false;
    double baseRate = 20.0;
    double hourlyRate = 5.0;
    double fee = CalculateParkingFee(spotsTaken, parkingStart, parkingEnd, membershipEnd, isProMember, baseRate, hourlyRate);

}
<body class="align-content-center">
    <div class="card" style="width: 18rem;">
        <div class="card-body">
            <div class="row">
                <div class="col">
                    <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="currentColor" class="bi bi-car-front-fill" viewBox="0 0 16 16">
                        <path d="M2.52 3.515A2.5 2.5 0 0 1 4.82 2h6.362c1 0 1.904.596 2.298 1.515l.792 1.848c.075.175.21.319.38.404.5.25.855.715.965 1.262l.335 1.679q.05.242.049.49v.413c0 .814-.39 1.543-1 1.997V13.5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1-.5-.5v-1.338c-1.292.048-2.745.088-4 .088s-2.708-.04-4-.088V13.5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1-.5-.5v-1.892c-.61-.454-1-1.183-1-1.997v-.413a2.5 2.5 0 0 1 .049-.49l.335-1.68c.11-.546.465-1.012.964-1.261a.8.8 0 0 0 .381-.404l.792-1.848ZM3 10a1 1 0 1 0 0-2 1 1 0 0 0 0 2m10 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2M6 8a1 1 0 0 0 0 2h4a1 1 0 1 0 0-2zM2.906 5.189a.51.51 0 0 0 .497.731c.91-.073 3.35-.17 4.597-.17s3.688.097 4.597.17a.51.51 0 0 0 .497-.731l-.956-1.913A.5.5 0 0 0 11.691 3H4.309a.5.5 0 0 0-.447.276L2.906 5.19Z" />
                    </svg>
                </div>
                <div class="col">
                    <h5 class="card-title">Invoice</h5>
                </div>
            </div>
            <h6 class="card-subtitle mb-2 text-muted">Garage 3.0</h6>
            <hr />
            <div>
                <ul class="list-group list-group-flush">
                     <li class="list-group-item">Member: @Model.OwnerFirstName @Model.OwnerLastName</li>
                    <li class="list-group-item">LicensePlate: @Model.LicensePlate</li>
                    <li class="list-group-item">Entered Time: @parkingStart</li>
                    <li class="list-group-item">Ended Time: @parkingEnd</li>
                    <li class="list-group-item">Duration: @Model.ParkedTime.TotalHours.ToString("F2") hours</li>
                    <li class="list-group-item">
                        Parking Fee:Price: @fee.ToString("F2") kr
                    </li>
                </ul>
            </div>
            <hr />
            <div>
                <a asp-action="Index">Back to Parking Lot</a>
            </div>
        </div>
    </div>
</body>
@functions {
    public double CalculateParkingFee(int spotsTaken, DateTime parkingStartTime, DateTime parkingEndTime, DateTime membershipEndTime, bool isProMember, double baseRate, double hourlyRate)
    {
        double totalFee = 0;
        if (isProMember)
        {
            var proDuration = parkingEndTime - parkingStartTime;
            totalFee += CalculateFee(spotsTaken, proDuration, baseRate * 0.9, hourlyRate * (spotsTaken > 1 ? 0.9 : 1.0));
        }
        else
        {
            if(membershipEndTime > parkingStartTime)
            {
                var proD = membershipEndTime - parkingStartTime;
                totalFee += CalculateFee(spotsTaken, proD, baseRate * 0.9, hourlyRate * (spotsTaken > 1 ? 0.9 : 1.0));
                var duration = parkingEndTime - membershipEndTime;
                totalFee += CalculateFee(spotsTaken, duration, baseRate, hourlyRate);
            }
            else
            {
                var duration = parkingEndTime - parkingStartTime;
                totalFee += CalculateFee(spotsTaken, duration, baseRate, hourlyRate);
            }
        }
        return totalFee;
    }

    private double CalculateFee(int spotsTaken, TimeSpan duration, double baseRate, double hourlyRate)
    {
        double adjustedBaseRate = baseRate;
        double adjustedHourlyRate = hourlyRate;

        // Adjust rates based on the number of spots taken
        switch (spotsTaken)
        {
            case 1:
                break; // No adjustment needed
            case 2:
                adjustedBaseRate *= 1.3;
                adjustedHourlyRate *= 1.4;
                break;
            case 3:
            default:
                adjustedBaseRate *= 1.6;
                adjustedHourlyRate *= 1.5;
                break;
        }

        return adjustedBaseRate + adjustedHourlyRate * duration.TotalHours;
    }
}